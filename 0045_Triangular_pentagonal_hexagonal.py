# PROBLEM 45 Triangular, pentagonal, and hexagonal

# Triangle, pentagonal, and hexagonal numbers are generated by the following formulae:
# Triangle 	  	Tn=n(n+1)/2 	  	1, 3, 6, 10, 15, ...
# Pentagonal 	  	Pn=n(3n−1)/2 	  	1, 5, 12, 22, 35, ...
# Hexagonal 	  	Hn=n(2n−1) 	  	1, 6, 15, 28, 45, ...

# It can be verified that T285 = P165 = H143 = 40755.
# Find the next triangle number that is also pentagonal and hexagonal.


# ----------- PSEUDOCODE -------------

#

# -------------- CODE ----------------
from math import sqrt


def triangle_generator(start=1) -> int:
    n = start
    while True:
        next_n = n * (n + 1) * 0.5
        n += 1
        yield int(next_n)


def is_triangle(num: int) -> bool:
    result = (sqrt(1 + 8*num) - 1)/2

    if result % int(result) == 0:
        return True
    else:
        return False


def is_pentagonal(num: int) -> bool:
    result = (-sqrt(1 + 24*num) - 1)/6

    if result % int(result) == 0:
        return True
    else:
        return False


def is_hexagonal(num: int) -> bool:
    result = (sqrt(1 + 8*num) + 1)/4

    if result % int(result) == 0:
        return True
    else:
        return False

# -------------- TESTS ---------------


def test_is_triangle():
    # given
    num = 15
    # when
    result = is_triangle(num)
    # then
    assert result == True
    assert type(result) == bool
    assert is_triangle(10) == True
    assert is_triangle(12) == False


def test_is_pentagonal():
    # given
    num = 92
    # when
    result = is_pentagonal(num)
    # then
    assert result == True
    assert type(result) == bool
    assert is_pentagonal(117) == True
    assert is_pentagonal(48) == False
    assert is_pentagonal(92) == True


def test_is_hexagonal():
    # given
    num = 45
    # when
    result = is_hexagonal(num)
    # then
    assert result == True
    assert type(result) == bool
    assert is_hexagonal(15) == True
    assert is_hexagonal(16) == False


# --------------- RUN ---------------
if __name__ == '__main__':
    for num in triangle_generator(286):
        if is_pentagonal(num) and is_hexagonal(num):
            print(num)
            break


# ------------ RESULT -------------
