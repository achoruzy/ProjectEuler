# PROBLEM 61 Cyclical figurate numbers

# Triangle, square, pentagonal, hexagonal, heptagonal, and octagonal numbers are all figurate (polygonal) numbers and are generated by the following formulae:
# Triangle 	  	P3,n=n(n+1)/2 	  	1, 3, 6, 10, 15, ...
# Square 	  	P4,n=n2 	  	1, 4, 9, 16, 25, ...
# Pentagonal 	  	P5,n=n(3n−1)/2 	  	1, 5, 12, 22, 35, ...
# Hexagonal 	  	P6,n=n(2n−1) 	  	1, 6, 15, 28, 45, ...
# Heptagonal 	  	P7,n=n(5n−3)/2 	  	1, 7, 18, 34, 55, ...
# Octagonal 	  	P8,n=n(3n−2) 	  	1, 8, 21, 40, 65, ...

# The ordered set of three 4-digit numbers: 8128, 2882, 8281, has three interesting properties.

#     The set is cyclic, in that the last two digits of each number is the first two digits of the next number (including the last number with the first).
#     Each polygonal type: triangle (P3,127=8128), square (P4,91=8281), and pentagonal (P5,44=2882), is represented by a different number in the set.
#     This is the only set of 4-digit numbers with this property.

# Find the sum of the only ordered set of six cyclic 4-digit numbers for which each polygonal type: triangle, square, pentagonal, hexagonal, heptagonal, and octagonal, is represented by a different number in the set.


# ----------- PSEUDOCODE -------------

#

# -------------- CODE ----------------
from math import sqrt


def is_triangle(num: int) -> bool:
    result = (sqrt(1 + 8*num) - 1)/2

    if result % int(result) == 0:
        return True
    else:
        return False


def is_square(num: int) -> bool:
    result = sqrt(num)

    if result % int(result) == 0:
        return True
    else:
        return False


def is_pentagonal(num: int) -> bool:
    result = (-sqrt(1 + 24*num) - 1)/6

    if result % int(result) == 0:
        return True
    else:
        return False


def is_hexagonal(num: int) -> bool:
    result = (sqrt(1 + 8*num) + 1)/4

    if result % int(result) == 0:
        return True
    else:
        return False


def is_heptagonal(num: int) -> bool:
    result = 0

    if result % int(result) == 0:
        return True
    else:
        return False


def is_octogonal(num: int) -> bool:
    result = (sqrt(4 + 6*num) + 3)/4

    if result % int(result) == 0:
        return True
    else:
        return False

# -------------- TESTS ---------------


def test_is_triangle():
    # given
    num = 15
    # when
    result = is_triangle(num)
    # then
    assert result == True
    assert type(result) == bool
    assert is_triangle(10) == True
    assert is_triangle(12) == False


def test_is_square():
    # given
    num = 4
    # when
    result = is_square(num)
    # then
    assert result == True
    assert type(result) == bool
    assert is_square(81) == True
    assert is_square(60) == False


def test_is_pentagonal():
    # given
    num = 92
    # when
    result = is_pentagonal(num)
    # then
    assert result == True
    assert type(result) == bool
    assert is_pentagonal(117) == True
    assert is_pentagonal(48) == False
    assert is_pentagonal(92) == True


def test_is_hexagonal():
    # given
    num = 45
    # when
    result = is_hexagonal(num)
    # then
    assert result == True
    assert type(result) == bool
    assert is_hexagonal(15) == True
    assert is_hexagonal(16) == False


def test_is_octogonal():
    # given
    num = 8
    # when
    result = is_octogonal(num)
    # then
    assert result == True
    assert type(result) == bool
    assert is_octogonal(65) == True
    assert is_octogonal(66) == False


# --------------- RUN ---------------
if __name__ == '__main__':
    pass


# ------------ RESULT -------------
