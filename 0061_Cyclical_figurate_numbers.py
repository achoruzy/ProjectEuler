# PROBLEM 61 Cyclical figurate numbers

# Triangle, square, pentagonal, hexagonal, heptagonal, and octagonal numbers are all figurate (polygonal) numbers and are generated by the following formulae:
# Triangle 	  	P3,n=n(n+1)/2 	  	1, 3, 6, 10, 15, ...
# Square 	  	P4,n=n2 	  	1, 4, 9, 16, 25, ...
# Pentagonal 	  	P5,n=n(3n−1)/2 	  	1, 5, 12, 22, 35, ...
# Hexagonal 	  	P6,n=n(2n−1) 	  	1, 6, 15, 28, 45, ...
# Heptagonal 	  	P7,n=n(5n−3)/2 	  	1, 7, 18, 34, 55, ...
# Octagonal 	  	P8,n=n(3n−2) 	  	1, 8, 21, 40, 65, ...

# The ordered set of three 4-digit numbers: 8128, 2882, 8281, has three interesting properties.

#     The set is cyclic, in that the last two digits of each number is the first two digits of the next number (including the last number with the first).
#     Each polygonal type: triangle (P3,127=8128), square (P4,91=8281), and pentagonal (P5,44=2882), is represented by a different number in the set.
#     This is the only set of 4-digit numbers with this property.

# Find the sum of the only ordered set of six cyclic 4-digit numbers for which each polygonal type: triangle, square, pentagonal, hexagonal, heptagonal, and octagonal, is represented by a different number in the set.


# ----------- PSEUDOCODE -------------

#

# -------------- CODE ----------------
from math import sqrt


def is_triangle(num: int) -> bool:
    result = (sqrt(1 + 8*num) - 1)/2

    if result % int(result) == 0:
        return True
    else:
        return False


def is_square(num: int) -> bool:
    result = sqrt(num)

    if result % int(result) == 0:
        return True
    else:
        return False


def is_pentagonal(num: int) -> bool:
    result = (sqrt(1 + 24*num) + 1)/6

    if result % int(result) == 0:
        return True
    else:
        return False


def is_hexagonal(num: int) -> bool:
    result = (sqrt((8*num) + 1) + 1)/4

    if result - int(result) == 0:
        return True
    else:
        return False


def is_heptagonal(num: int) -> bool:
    result = (3 + sqrt(9 + 40*num))/10

    if result % int(result) == 0:
        return True
    else:
        return False


def is_octogonal(num: int) -> bool:
    result = (sqrt(1 + 3*num) + 1)/3

    if result % int(result) == 0:
        return True
    else:
        return False


def combine_num(half_1: int, half_2: int) -> int:
    str_1 = str(half_1)
    str_2 = str(half_2)
    str_connected = str_1 + str_2
    result_int = int(str_connected)

    return result_int


def is_cyclical(num: int, calculate=[True, True, True, True, True]) -> list:
    result = []

    is_tri = is_triangle(num)
    is_sq = is_square(num)
    is_pen = is_pentagonal(num)
    is_hex = is_hexagonal(num)
    is_hept = is_heptagonal(num)
    is_octo = is_octogonal(num)

    wip = [is_tri, is_sq, is_pen, is_hex, is_hept, is_octo]

    for i in range(0, 6):
        result.append(wip[i])

    return result


def compare_bool_list(list1: list, list2: list) -> list:
    result = list1.copy()
    for i in range(0, 5):
        if list2[i]:
            result[i] = False
    return result


def is_list_cyclical(c_list: list) -> bool:
    result = [0, 0, 0, 0, 0, 0]

    for num in c_list:
        is_tri = is_triangle(num)
        is_sq = is_square(num)
        is_pen = is_pentagonal(num)
        is_hex = is_hexagonal(num)
        is_hept = is_heptagonal(num)
        is_octo = is_octogonal(num)

        wip = [is_tri, is_sq, is_pen, is_hex, is_hept, is_octo]

        for answ in wip:
            if answ == True:
                index = wip.index(answ)
                result[index] += 1

    if result[3] != 0:
        print(result)
    for i in result:
        if i == 0:
            return False
    return True

    result = []
    for h1 in range(10, 100):

        for h2 in range(10, 100):
            num_1 = combine_num(h1, h2)
            is_cycl = is_cyclical(num_1)

            if True in is_cycl and h2 != h1:

                for h3 in range(10, 100):
                    num_2 = combine_num(h2, h3)
                    is_cycl2 = is_cyclical(num_2)

                    if True in is_cycl2 and h3 not in [h1, h2]:

                        for h4 in range(10, 100):
                            num_3 = combine_num(h3, h4)
                            is_cycl3 = is_cyclical(num_3)

                            if True in is_cycl3 and h4 not in [h1, h2, h3]:

                                for h5 in range(10, 100):
                                    num_4 = combine_num(h4, h5)
                                    is_cycl4 = is_cyclical(num_4)

                                    if True in is_cycl4 and h5 not in [h1, h2, h3, h4]:

                                        for h6 in range(10, 100):
                                            num_5 = combine_num(h5, h6)
                                            is_cycl5 = is_cyclical(
                                                num_5)

                                            if True in is_cycl5 and h6 not in [h1, h2, h3, h4, h5]:

                                                num_6 = combine_num(h6, h1)
                                                is_cycl6 = is_cyclical(
                                                    num_6)

                                                if True in is_cycl6:

                                                    result = [num_1, num_2, num_3,
                                                              num_4, num_5, num_6]

                                                    is_list_cyc = is_list_cyclical(
                                                        result)

                                                    if is_list_cyc:
                                                        print(
                                                            result, sum(result))
                                                        print('')


def triangle_gen(start: int, stop: int) -> int:
    num = 1
    result = 0
    while result <= stop:
        result = int((num * num + num) / 2)
        if stop >= result >= start:
            yield result
        num += 1


def square_gen(start: int, stop: int) -> int:
    num = 1
    result = 0
    while result <= stop:
        result = num * num
        if stop >= result >= start:
            yield result
        num += 1


def pentagonal_gen(start: int, stop: int) -> int:
    num = 1
    result = 0
    while result <= stop:
        result = int((3 * num * num - num) / 2)
        if stop >= result >= start:
            yield result
        num += 1


def hexagonal_gen(start: int, stop: int) -> int:
    num = 1
    result = 0
    while result <= stop:
        result = 2 * num * num + num
        if stop >= result >= start:
            yield result
        num += 1


def heptagonal_gen(start: int, stop: int) -> int:
    num = 1
    result = 0
    while result <= stop:
        result = int((5 * num * num - 3 * num) / 2)
        if stop >= result >= start:
            yield result
        num += 1


def octagonal_gen(start: int, stop: int) -> int:
    num = 1
    result = 0
    while result <= stop:
        result = 3 * num * num - 2 * num
        if stop >= result >= start:
            yield result
        num += 1


def check_next(num1: int, num2: int) -> bool:
    num1_endstr = str(num1)[2:]
    num2_startstr = str(num2)[:2]
    if num1_endstr == num2_startstr:
        return True
    return False


def main():
    start = 1011
    end = 9998

    tri_list = [i for i in triangle_gen(start, end)]
    squ_list = [i for i in square_gen(start, end)]
    pen_list = [i for i in pentagonal_gen(start, end)]
    hex_list = [i for i in hexagonal_gen(start, end)]
    hep_list = [i for i in heptagonal_gen(start, end)]
    octo_list = [i for i in octagonal_gen(start, end)]

    all_list = []
    all_list.extend(tri_list)
    all_list.extend(squ_list)
    all_list.extend(pen_list)
    all_list.extend(hex_list)
    all_list.extend(hep_list)
    all_list.extend(octo_list)

    for num in all_list:
        second = []

        for num2 in all_list:
            if check_next(num, num2):
                second.append(num2)

            third = []
            for num3 in second:
                if check_next(num2, num3):
                    third.append(num3)

                fourth = []
                for num4 in third:
                    if check_next(num3, num4):
                        fourth.append(num4)

                    fifth = []
                    for num5 in fourth:
                        if check_next(num4, num5):
                            fifth.append(num5)

                        for num6 in fifth:
                            if check_next(num5, num6):
                                # print('                 ', num6)
                                check_list = [num, num2,
                                              num3, num4, num5, num6]
                                brejk = False
                                for i in check_list:
                                    if check_list.count(i) > 1:
                                        brejk = True
                                if not brejk:
                                    print(num, num2, num3, num4,
                                          num5, num6, '\n')


# -------------- TESTS ---------------


def test_is_triangle():
    # given
    num = 15
    # when
    result = is_triangle(num)
    # then
    assert result == True
    assert type(result) == bool
    assert is_triangle(10) == True
    assert is_triangle(12) == False


def test_is_square():
    # given
    num = 4
    # when
    result = is_square(num)
    # then
    assert result == True
    assert type(result) == bool
    assert is_square(81) == True
    assert is_square(60) == False


def test_is_pentagonal():
    # given
    num = 92
    # when
    result = is_pentagonal(num)
    # then
    assert result == True
    assert type(result) == bool
    assert is_pentagonal(117) == True
    assert is_pentagonal(48) == False
    assert is_pentagonal(92) == True


def test_is_hexagonal():
    # given
    num = 45
    # when
    result = is_hexagonal(num)
    # then
    assert result == True
    assert type(result) == bool
    assert is_hexagonal(15) == True
    assert is_hexagonal(16) == False
    assert is_hexagonal(946) == True


def test_is_heptagonal():
    # given
    num = 55
    # when
    result = is_heptagonal(num)
    # then
    assert result == True
    assert type(result) == bool
    assert is_heptagonal(34) == True
    assert is_heptagonal(35) == False


def test_is_octogonal():
    # given
    num = 8
    # when
    result = is_octogonal(num)
    # then
    assert result == True
    assert type(result) == bool
    assert is_octogonal(65) == True
    assert is_octogonal(66) == False


def test_combine_num():
    half1 = 23
    half2 = 87
    assert combine_num(half1, half2) == 2387


# --------------- RUN ---------------
if __name__ == '__main__':
    main()


# ------------ RESULT -------------
