# PROBLEM 44 Pentagon numbers

# Pentagonal numbers are generated by the formula, Pn = n(3n−1)/2. The first ten pentagonal numbers are:
# 1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...

# It can be seen that P4 + P7 = 22 + 70 = 92 = P8. However, their difference, 70 − 22 = 48, is not pentagonal.

# Find the pair of pentagonal numbers, Pj and Pk, for which their sum and difference are pentagonal and D = |Pk − Pj | is minimised
# what is the value of D?

# ----------- PSEUDOCODE -------------

# generate pentagonal numbers for Pk and Pj
# check sum and difference for Pk and Pj
# check if sum and difference are pentagonal
# if YES:
# if difference of Pk and Pj is smaller than for previously saved pair then then override it
# else go on
# return saved difference

# -------------- CODE ----------------
from math import sqrt


class PenGen:
    def __init__(self):
        pass

    @staticmethod
    def pentagonal_generator(start=1) -> int:
        n = start
        while True:
            next_n = n * (3*n - 1) * 0.5
            n += 1
            yield int(next_n)


def is_pentagonal(num: int) -> bool:
    result = (-sqrt(1 + 24*num) - 1)/6

    if result % int(result) == 0:
        return True
    else:
        return False

# -------------- TESTS ---------------


def test_pentagonal_generator():
    # when
    gen = PenGen()
    result = gen.pentagonal_generator()
    # then
    assert next(result) == 1
    assert next(result) == 5
    assert next(result) == 12
    assert type(next(result)) == int


def test_is_pentagonal():
    # given
    num = 92
    # when
    result = is_pentagonal(num)
    # then
    assert result == True
    assert type(result) == bool
    assert is_pentagonal(117) == True
    assert is_pentagonal(116) == False
    assert is_pentagonal(22) == True
    assert is_pentagonal(70) == True
    assert is_pentagonal(48) == False
    assert is_pentagonal(92) == True


# --------------- RUN ---------------
if __name__ == '__main__':
    result_nums = [0, 0, 0, 0]
    diff_min = 9999999
    calc_boundary = 1000
    count = 1

    gen_1 = PenGen()
    gen_2 = PenGen()

    for num_k in gen_1.pentagonal_generator(1000):
        count_2 = 1

        for num_j in gen_2.pentagonal_generator(2000):

            diff_kj = abs(num_j - num_k)
            sum_kj = num_k + num_j

            if diff_kj >= diff_min:
                break

            is_diff = is_pentagonal(diff_kj)
            is_sum = is_pentagonal(sum_kj)

            # print(diff_kj, is_diff, sum_kj, is_sum)

            if is_diff:
                print(diff_kj)
                if is_sum:
                    print('sum: ', is_sum)
                    diff_min = diff_kj
                    result_nums[0] = num_k
                    result_nums[1] = num_j
                    result_nums[2] = sum_kj
                    result_nums[3] = diff_kj
                    print(result_nums)
                    break

            if count_2 >= calc_boundary:
                break
            count_2 += 1

        if count >= calc_boundary:
            break
        count += 1

    print(result_nums)
    print(diff_min)

# ------------ RESULT -------------
# [1560090, 7042750, 8602840, 5482660]
# 5482660
